adr_splash=0x44000000
recover_file=openvario/ov-recovery.itb
boot_targets=usb0 mmc0

[openvario_preboot]
run openvario_env;

setenv splash ov_booting_${rotation}.bmp;
run splash_display;

usb start;

[distro_bootcmd]
for target in ${boot_targets}; do
  run bootcmd_${target};
done;

[bootcmd_mmc0]
echo Try to boot from mmc ...;
run set_bootargs;
load mmc 0:1 ${fdt_addr_r} ${fdtfile};
load mmc 0:1 ${kernel_addr_r} uImage;
bootm ${kernel_addr_r} - ${fdt_addr_r}

[bootcmd_usb0]
echo Try recoverboot from USB;
if test -e usb 0:1 ${recover_file}; then
  echo Recover File ${recover_file} found...;
  setenv splash ov_recover_${rotation}.bmp;
  run splash_display;
  run boot_itb_on_usb;
else
  echo No Recovery file found ...;
fi

[openvario_env]
echo Try to load config.uEnv;
if test -e mmc 0:1 config.uEnv;
  then echo Load config.uEnv ...;
  load mmc 0:1 0x43000000 config.uEnv;
  env import -r -t 0x43000000 ${filesize};
fi

[set_bootargs]
setenv bootargs quiet console=ttyS0,115200 root=/dev/mmcblk0p2 rootwait panic=10;

# This module parameter solves a XCSoar
# freeze problem by putting an upper bound on the time userspace
# waits for the GPU driver
# (https://github.com/Openvario/meta-openvario/issues/71).
setenv bootargs ${bootargs} lima.job_hang_limit=10;

if test -n $rotation; then
   setenv bootargs ${bootargs} fbcon=rotate:${rotation};
fi;

if test -n $font; then
   setenv bootargs ${bootargs} vconsole.font=$font;
fi;

setenv bootargs ${bootargs} ${extra_bootargs};

[boot_itb_from_net]
setenv serverip 192.168.0.100;
setenv ipaddr 192.168.0.126;
tftp 0x48000000 openvario/ov-recovery.itb;
tftp 0x43000000 openvario/script.bin;

[boot_itb_on_usb]
fatload usb 0:1 0x48000000 ${recover_file};
setenv bootargs console=tty0;
bootm 0x48000000

[uboot_flash]
etenv serverip 192.168.1.150;
setenv ipaddr 192.168.1.126;
mw.b 0x48000000 0x00 0x100000;
tftp 0x48000000 u-boot-sunxi-with-spl.bin;
mmc erase 0x10 0x400;
mmc write 0x48000000 0x10 0x400

[splash_display]
fatload mmc 0:1 ${adr_splash} ${splash};
bmp display ${adr_splash};
